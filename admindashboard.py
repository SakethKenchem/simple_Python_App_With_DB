import mysql.connector
import bcrypt
from reportlab.pdfgen import canvas
import datetime

def connect_to_database():
    mydb = mysql.connector.connect(
        host="localhost",
        user="root",
        password="S00per-d00per",
        database="mydatabase"
    )
    return mydb

def hash_password(password):
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    return hashed_password.decode('utf-8')

def verify_admin(username, password):
    mydb = connect_to_database()
    mycursor = mydb.cursor()

    sql = "SELECT * FROM admin WHERE adminName = %s"
    values = (username,)

    mycursor.execute(sql, values)
    admin = mycursor.fetchone()

    mycursor.close()
    mydb.close()

    if admin:
        stored_hash = admin[2]  # Assuming the hashed password is in the third column
        if bcrypt.checkpw(password.encode('utf-8'), stored_hash.encode('utf-8')):
            return True

    return False

def admin_login():
    while True:
        username = input("Enter admin username: ")
        password = input("Enter admin password: ")

        if verify_admin(username, password):
            print("Admin login successful.")
            admin_menu()
            break
        else:
            print("Invalid admin credentials. Please try again.")

def admin_menu():
    while True:
        print("\nAdmin Menu:")
        print("1. Add a new user")
        print("2. Retrieve all users")
        print("3. Delete a user")
        print("4. Export users to PDF")
        print("5. Exit")

        choice = input("Enter your choice (1/2/3/4/5): ")

        if choice == "1":
            add_user()
        elif choice == "2":
            users = get_all_users()
            print_user_list(users)
        elif choice == "3":
            delete_a_user()
        elif choice == "4":
            export_users_to_pdf()
        elif choice == "5":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter 1, 2, 3, 4, or 5.")

def add_user():
    name = input("Enter the name of the new user: ")
    password = input("Enter the password for the new user: ")

    mydb = connect_to_database()
    mycursor = mydb.cursor()

    hashed_password = hash_password(password)

    sql = "INSERT INTO users (name, password) VALUES (%s, %s)"
    values = (name, hashed_password)

    mycursor.execute(sql, values)
    mydb.commit()

    mycursor.close()
    mydb.close()

    print(f"User '{name}' added successfully!")

def delete_a_user():
    name = input("Enter name of user: ")
    user_id = input("Enter ID of user: ")

    mydb = connect_to_database()
    mycursor = mydb.cursor()

    sql = "DELETE FROM users WHERE name = %s AND id = %s"
    values = (name, user_id)

    mycursor.execute(sql, values)
    mydb.commit()

    mycursor.close()
    mydb.close()

    print(f"User '{name}' with ID '{user_id}' deleted successfully!")

def export_users_to_pdf():
    username = input("Enter admin username: ")
    password = input("Enter admin password to export user data: ")

    if verify_admin(username, password):
        users = get_all_users()

        pdf_filename = "user_list.pdf"
        pdf = canvas.Canvas(pdf_filename)
        pdf.setFont("Helvetica", 12)

        pdf.drawString(100, 800, "User List:")
        y_position = 780

        for user in users:
            y_position -= 15
            pdf.drawString(100, y_position, f"Name: {user[1]}, ID: {user[0]}")

        x = datetime.datetime.now()
        pdf.setFont("Helvetica", 8)
        pdf.drawString(500, 30, f"Date generated: {x}")

        pdf.setFont("Helvetica", 8)
        pdf.drawString(10, 30, f"Generated by: {username}")

        pdf.save()

        print(f"User list exported to {pdf_filename}")
    else:
        print("Invalid admin credentials. Cannot export user data.")


def get_all_users():
    mydb = connect_to_database()
    mycursor = mydb.cursor()

    sql = "SELECT * FROM users"
    mycursor.execute(sql)

    users = mycursor.fetchall()

    mycursor.close()
    mydb.close()

    return users

def print_user_list(users):
    print("All Users:")
    for user in users:
        print(user)

if __name__ == "__main__":
    admin_login()
